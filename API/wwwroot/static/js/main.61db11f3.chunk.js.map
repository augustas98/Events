{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/ReusableTextInput.tsx","features/users/LoginForm.tsx","features/users/RegisterForm.tsx","features/activities/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/ReusableTextArea.tsx","app/common/options/categoryOptions.ts","app/common/form/ReusableSelectInput.tsx","app/common/form/ReusableDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSideBar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/ValidationErrors.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEdit.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","BadRequest","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","listActivities","predicate","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPagination","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","disposeSelectedActivity","makeAutoObservable","reaction","keys","clear","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","URLSearchParams","toString","toISOString","ProfileStore","loadingProfile","uploading","userActivities","loadingActivities","loadProfile","photo","photos","isMain","setImage","p","editProfile","setDisplayName","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","activityStore","sessionStorage","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","registerLocale","lt","vertical","size","width","marginTop","Header","attached","color","active","has","className","locale","onChange","Card","Content","Description","str","length","substring","truncate","bio","extra","Icon","List","horizontal","map","Popup","hoverable","trigger","circular","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","basic","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","fluid","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","ReusableTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","autoComplete","placeholder","type","render","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","ReusableTextArea","categoryOptions","ReusableSelectInput","helpers","Select","clearable","options","e","d","setValue","onBlur","setTouched","ReusableDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","timeFormat","border","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","resetForm","onKeyPress","shiftKey","preventDefault","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","ActivityDetailedSideBar","ValidationErrors","Message","err","i","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","ProfileEdit","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderColor","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.61db11f3.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 4) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\nfunction BadRequest(data: any, config: AxiosRequestConfig) {\r\n    if (typeof data === 'string')\r\n    {\r\n        toast.error(data);\r\n    }\r\n\r\n    if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n        history.push('/not-found');\r\n    }\r\n\r\n    if (data.errors)\r\n    {\r\n        const modalStateErrors = [];\r\n        for (const key in data.errors) \r\n        {\r\n            if (data.errors[key])\r\n            {\r\n                modalStateErrors.push(data.errors[key]);\r\n            }\r\n        }\r\n        throw modalStateErrors.flat();\r\n    }\r\n}\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token)\r\n    config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n        if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n        const pagination = response.headers['pagination'];\r\n        if (pagination) {\r\n            response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n            return response as AxiosResponse<PaginatedResult<any>>;\r\n        }\r\n        return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            BadRequest(data, config);\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorized');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`,\r\n        profile),\r\n    listActivities: (username: string, predicate: string) =>\r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost?: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => \r\n        a.date!.getTime() - b.date!.getTime());\r\n    }\r\n    \r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'yyyy-MM-dd');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                resetPredicate();\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n            case 'category':\r\n                resetPredicate();\r\n                this.predicate.delete('category');\r\n                this.predicate.set('category', value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                });\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            }) \r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity};\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id : string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }      \r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                }\r\n                else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error)\r\n        {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    disposeSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n}\r\n","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                }\r\n\r\n                if (photo.isMain && store.userStore.user) {\r\n                    store.userStore.setImage(photo.url);\r\n                    this.profile!.image = photo.url;\r\n                }\r\n\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n                console.log(error)\r\n            })\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                }\r\n                this.loading = false;\r\n            })\r\n        } catch (error)\r\n        {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    editProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !==\r\n                    store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = { ...this.profile, ...profile as Profile };\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username,\r\n                predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async(creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        store.activityStore.activityRegistry.clear();\r\n        sessionStorage.clear();\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds:UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) {\r\n            this.user.image = image;\r\n        }\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore{\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing connection: ', error))\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments;\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error))\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer (function NavBar() {\r\n    const {userStore: {user, logout}} = useStore();\r\n\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/house-logo.png\" alt=\"logo\" style={{marginRight: '10px'}} />\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Renginiai'></Menu.Item>\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Sukurti renginį'></Button>\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='Mano Profilis' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Atsijungti' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Dropdown, Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport lt from 'date-fns/locale/lt';\r\nimport { registerLocale } from \"react-datepicker\";\r\nregisterLocale(\"lt\", lt);\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 26 }}>\r\n                <Header icon='filter' attached color='blue' content='Filtrai' />\r\n                <Menu.Item \r\n                    content='Visi renginiai'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"Aš dalyvausiu\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                 />\r\n                <Menu.Item\r\n                content=\"Aš rengiu\"\r\n                active={predicate.has('isHost')}\r\n                onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n                <Dropdown text='Kategorija' pointing='left' className='link item'>\r\n                <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => setPredicate('category', 'drinks')}>Gėrimai</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => setPredicate('category', 'culture')}>Kultūra</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => setPredicate('category', 'film')}>Filmai</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => setPredicate('category', 'food')}>Maistas</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => setPredicate('category', 'music')}>Muzika</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => setPredicate('category', 'travel')}>Kelionės</Dropdown.Item>\r\n                </Dropdown.Menu>    \r\n                </Dropdown>   \r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                locale=\"lt\" \r\n                onChange={(date: Date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props)\r\n{\r\n\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 35 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`} >\r\n                            <Image size='mini' circular src={attendee.image || '/assets/user.png'} />\r\n                        </List.Item>\r\n                    }>\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Renginio savininkas <Link to={`profiles/${activity.hostUsername}`}> {activity.host?.displayName} </Link> </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        Jūs esate šio renginio savininkas\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        Jūs dalyvaujate šiame renginyje\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'yyyy-MM-dd HH:mm')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='blue'\r\n                    floated='right'\r\n                    content='peržiūrėti' />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='blue'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='peržiūrėti' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function ReusableTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport ReusableTextInput from '../../app/common/form/ReusableTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error =>\r\n                setErrors({error: 'Neteisingas e.paštas arba slaptažodis'}))}>\r\n            {({handleSubmit, isSubmitting, errors}) =>\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Prisijungti' color='blue' textAlign='center' />\r\n                    <ReusableTextInput name='email' placeholder='Elektroninis paštas' />\r\n                    <ReusableTextInput name='password' placeholder='Slaptažodis' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Patvirtinti' type='submit' fluid />\r\n                </Form>    \r\n            }\r\n        </Formik>\r\n    )\r\n})","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\nimport ReusableTextInput from '../../app/common/form/ReusableTextInput';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error: 'Toks e.paštas jau yra naudojamas arba per silpnas slaptažodis'}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Registracija' color='blue' textAlign='center' />\r\n                    <ReusableTextInput name='displayName' placeholder='Vaizduojamas vardas' />\r\n                    <ReusableTextInput name='username' placeholder='Naudotojo vardas' />\r\n                    <ReusableTextInput name='email' placeholder='Elektroninis paštas' />\r\n                    <ReusableTextInput name='password' placeholder='Slaptažodis' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} positive content='Patvirtinti' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Segment, Header, Button } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport LoginForm from \"../../users/LoginForm\";\r\nimport RegisterForm from \"../../users/RegisterForm\";\r\n\r\nexport default observer (function HomePage() {\r\n    const {userStore, modalStore } = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' className='masthead'>\r\n            <Container text>\r\n                <Header as='homepageheader' inverted color='black'>\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                    <Button as={Link} to='/activities' size='huge' color='blue' inverted>\r\n                    Eiti į renginius!\r\n                    </Button>\r\n                    </>\r\n                ) : (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' color='blue' inverted={false}>\r\n                                Prisijungti\r\n                            </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' color='blue' inverted={false}>\r\n                                Registruotis\r\n                            </Button>\r\n                        </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({ inverted = true, content = 'Loading' }: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function ReusableTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Gėrimai', value: 'drinks'},\r\n    {text: 'Kultūra', value: 'culture'},\r\n    {text: 'Filmai', value: 'film'},\r\n    {text: 'Maistas', value: 'food'},\r\n    {text: 'Muzika', value: 'music'},\r\n    {text: 'Kelionės', value: 'travel'},\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function ReusableSelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            \r\n            <Select clearable\r\n                    options={props.options}\r\n                    value={field.value || null}\r\n                    onChange={(e, d) => helpers.setValue(d.value)} \r\n                    onBlur={() => helpers.setTouched(true)}\r\n                    placeholder={props.placeholder}/>\r\n\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps, registerLocale} from 'react-datepicker';\r\nimport lt from 'date-fns/locale/lt';\r\nregisterLocale(\"lt\", lt);\r\n\r\nexport default function ReusableDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>       \r\n            <DatePicker\r\n            locale=\"lt\"            \r\n            {...field}         \r\n            {...props}        \r\n            selected={(field.value && new Date(field.value)) || null}\r\n            onChange={value => helpers.setValue(value)}                                  \r\n            />                              \r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport ReusableTextInput from \"../../../app/common/form/ReusableTextInput\";\r\nimport ReusableTextArea from \"../../../app/common/form/ReusableTextArea\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport ReusableSelectInput from \"../../../app/common/form/ReusableSelectInput\";\r\nimport ReusableDateInput from \"../../../app/common/form/ReusableDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const {createActivity, updateActivity,\r\n         loadActivity, loadingInitial} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('Pavadinimas yra privalomas'),\r\n        description: Yup.string().required('Aprašymas yra privalomas'),\r\n        category: Yup.string().required('Kategorija yra privaloma'),\r\n        date: Yup.string().required('Data yra privaloma').nullable(),\r\n        city: Yup.string().required('Miestas yra privalomas'),\r\n        venue: Yup.string().required('Vieta yra privaloma')\r\n    })\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity!)))\r\n    }, [id, loadActivity]);\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Kraunasi...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Renginio detalės' sub color='blue' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <ReusableTextInput name='title' placeholder='Pavadinimas' />\r\n                        <ReusableTextArea rows={3} placeholder='Aprašymas' name='description' />\r\n                        <ReusableSelectInput options={categoryOptions} placeholder='Kategorija' name='category' />\r\n                        <ReusableDateInput\r\n                            placeholderText='Data'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy HH:mm'\r\n                            timeFormat='HH:mm'\r\n                        />\r\n                        <Header content='Vietos detalės' sub color='blue' />\r\n                        <ReusableTextInput placeholder='Miestas' name='city' />\r\n                        <ReusableTextInput placeholder='Vieta' name='venue' />\r\n                        <Button\r\n                            disabled={isSubmitting || !isValid || !dirty}\r\n\r\n                            loading={isSubmitting} floated='right' positive type='submit' content='Patvirtinti'\r\n                        />\r\n                        <Button as={Link} to='/activities' floated='right' type='submit' content='Atšaukti' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport lt from 'date-fns/locale/lt';\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='blue'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Komentarai</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>prieš {formatDistanceToNow(comment.createdAt, { locale:lt })}</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n                    <Formik\r\n                        onSubmit={(values, { resetForm }) =>\r\n                            commentStore.addComment(values).then(() => resetForm())}\r\n                        initialValues={{ body: '' }}\r\n                        validationSchema={Yup.object({\r\n                            body: Yup.string().required()\r\n                        })}\r\n                    >\r\n                        {({ isSubmitting, isValid, handleSubmit }) => (\r\n                            <Form className='ui form'>\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps) => (\r\n                                        <div style={{position: 'relative'}}>\r\n                                            <Loader active={isSubmitting}/>\r\n                                            <textarea\r\n                                                placeholder='Įvesk kažką!'\r\n                                                rows={2}\r\n                                                {...props.field}\r\n                                                onKeyPress={e => {\r\n                                                    \r\n                                                    if (e.key === 'Enter' && e.shiftKey) {\r\n                                                        return;\r\n                                                    }\r\n\r\n                                                    if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                        e.preventDefault();\r\n                                                        isValid && handleSubmit();\r\n                                                    }\r\n\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{position: 'absolute', zIndex: 100, left: -14, top: 20}}\r\n                    ribbon color='red' content='Atšaukta' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'yyyy-MM-dd')}</p>\r\n                                <p>\r\n                                    Renginio savininkas <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button \r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Renginys vyks' : 'Atšaukti šį renginį'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link} \r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`} \r\n                            color='orange' \r\n                            floated='right'>\r\n                            Redaguoti\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button\r\n                    loading={loading} onClick={updateAttendance}>Atšaukti dalyvavimą</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                    loading={loading} onClick={updateAttendance} color='blue'>Dalyvauti renginyje</Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='blue' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='blue'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'yyyy-MM-dd HH:mm')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='blue'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='blue'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Žmogus' : 'Žmonės'} dalyvauja\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Savininkas\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSideBar from \"./ActivityDetailedSideBar\";\r\n\r\nexport default observer (function ActivityDetails() {\r\n\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, disposeSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => disposeSelectedActivity();\r\n    }, [id, loadActivity, disposeSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSideBar activity={activity}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n            <ValidationErrors errors={errors} />}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Sorry, we couldn't find anything.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary> \r\n                Return to activities \r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n            <Segment>\r\n                <Header as='h4' content='Stack trace' color='blue' />\r\n                <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n            </Segment>\r\n                \r\n            }\r\n        </Container>\r\n    )\r\n}) ","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer (function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n    \r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ReusableTextInput from \"../../app/common/form/ReusableTextInput\";\r\nimport ReusableTextArea from \"../../app/common/form/ReusableTextArea\";\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\nexport default observer(function ProfileEditForm({ setEditMode }: Props) {\r\n    const { profileStore: { profile, editProfile } } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                displayName: profile?.displayName, bio:\r\n                    profile?.bio\r\n            }}\r\n            onSubmit={values => {\r\n                editProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({ isSubmitting, isValid, dirty }) => (\r\n                <Form className='ui form'>\r\n                    <ReusableTextInput placeholder='Display Name'\r\n                        name='displayName' />\r\n                    <ReusableTextArea rows={3} placeholder='Add your bio'\r\n                        name='bio' />\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Atnaujinti'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { observer } from 'mobx-react-lite';\r\nimport ProfileEdit from './ProfileEdit';\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`Apie ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Atšaukti' : 'Redaguoti profilį'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEdit setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Ateityje', pane: { key: 'future' } },\r\n    { menuItem: 'Praeityje', pane: { key: 'past' } },\r\n    { menuItem: 'Rengiami', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    \r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as\r\n            number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar'\r\n                        content={'Renginiai'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{\r\n                                        minHeight: 100, objectFit:\r\n                                            'cover'\r\n                                    }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'yyyy-MM-dd')}</div>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'hh:mm')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n\r\n}\r\n\r\nexport default function PhotoWidgetCropper({ imagePreview, setCropper }: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n        console.log(acceptedFiles);\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport { Cropper } from 'react-cropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        })\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='blue' content='Pirmas žingsnis - Pridėkite nuotrauką' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='blue' content='Antras žingsnis - Pakeiskite nuotraukos dydį' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='blue' content='Trečias žingsnis - Peržiūrėkite ir įkelkite' />\r\n                {files && files.length > 0 &&\r\n                <>\r\n                    <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                    <Button.Group widths={2}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                    </Button.Group>\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Card, Header, Tab, Image, Grid, Button } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto,\r\n        uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Nuotraukos' />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic content={addPhotoMode ? 'Atšaukti' : 'Pridėti nuotrauką'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Pagr.'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id} />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({ profile }: Props) {\r\n    const panes = [\r\n        { menuItem: 'Apie', render: () => <ProfileAbout /> },\r\n        { menuItem: 'Nuotraukos', render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: 'Renginiai', render: () => <ProfileActivities />}\r\n    ]\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Grid, Header, Item, Segment } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'}></Item.Image>\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n    }, [loadProfile, username])\r\n\r\n    if (loadingProfile)\r\n        return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport './styles.css';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router';\r\nimport HomePage from '../../features/activities/home/HomePage';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../features/errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n  const {commonStore, userStore} = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      commonStore.setAppLoaded();\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading...' />\r\n\r\n  return (\r\n    <>\r\n    <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer />\r\n      <Route exact path='/' component={HomePage} />\r\n      <Route \r\n        path={'/(.+)'}\r\n        render={() => (\r\n          <>\r\n      <NavBar />\r\n      <Container style={{marginTop: '7em'}}>\r\n        <Switch>\r\n        <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n        <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n        <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n        <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n        <PrivateRoute path='/errors' component={TestErrors} />\r\n        <Route path='/server-error' component={ServerError} />\r\n        <Route component={NotFound} />\r\n        </Switch>\r\n      </Container>\r\n          </>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './app/layout/styles.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport { Router } from 'react-router-dom';\r\nimport {createBrowserHistory} from 'history';\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <StoreContext.Provider value={store}>\r\n    <Router history={history}>\r\n      <ScrollToTop />\r\n      <App />\r\n    </Router>\r\n  </StoreContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}